{"version":3,"file":"static/js/860.8244b6b8.chunk.js","mappings":"8KAyCA,EApCoB,WAgBlB,IAAMA,EAAW,SAAH,GAAkB,IAAZC,EAAI,EAAJA,KAClBC,EAAAA,GAAAA,QAAcD,EAAM,CAClBE,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVC,MAAO,SAEX,EAMA,OAJAX,EAASY,UAAY,CACnBX,KAAMY,IAAAA,OAAAA,YAGD,CAAEb,SAAAA,EACX,C,mKCpCac,GAAWC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAY,8KAWvBE,GAAYF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAa,4KAUzBI,GAAeJ,EAAAA,EAAAA,IAAOK,EAAAA,GAAPL,CAAoB,mEAInCM,EAAaN,EAAAA,GAAAA,OAAa,mKAQ1BO,EAAYP,EAAAA,GAAAA,IAAU,+CAItBQ,EAAaR,EAAAA,GAAAA,EAAQ,2I,SCxB5BS,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,KAAMF,EAAAA,KACHG,SAAS,uBACTC,IAAI,EAAG,2BACPC,IAAI,GAAI,0BACXC,SAAUN,EAAAA,KACPG,SAAS,qBACTC,IAAI,EAAG,uCACPC,IAAI,GAAI,uCACXE,MAAOP,EAAAA,KACJG,SAAS,mBACTC,IAAI,EAAG,uBACPC,IAAI,GAAI,wBAGPG,EAAgB,CACpBN,KAAM,GACNI,SAAU,GACVC,MAAO,IAoET,EAjEe,WACb,IAAME,GAAWC,EAAAA,EAAAA,MAETnC,GAAaoC,EAAAA,EAAAA,KAAbpC,SAWR,OACE,SAAC,KAAM,CACLiC,cAAeA,EACfI,iBAAkBb,EAClBc,SAbiB,SAACC,EAAO,GAAoB,IAAjBC,EAAS,EAATA,UACtBb,EAA0BY,EAA1BZ,KAAMK,EAAoBO,EAApBP,MAAOD,EAAaQ,EAAbR,SACrBG,GAASO,EAAAA,EAAAA,IAAS,CAAEd,KAAAA,EAAMK,MAAAA,EAAOD,SAAAA,KACjCS,IACAxC,EAAS,CACPC,KAAK,GAAD,OAAK0B,EAAKe,cAAa,wBAE/B,EAM2B,SAEtB,gBAAGC,EAAY,EAAZA,aAAY,OACd,UAAC7B,EAAQ,YACP,UAACQ,EAAS,YACR,SAACL,EAAS,CACR2B,MAAM,QACNC,KAAK,OACLlB,KAAK,OACLC,UAAQ,EACRkB,YAAY,sBAEd,SAAC3B,EAAY,CAACQ,KAAK,OAAOoB,UAAU,YAEtC,UAACzB,EAAS,YACR,SAACL,EAAS,CACR2B,MAAM,WACNjB,KAAK,WACLkB,KAAK,WACLjB,UAAQ,EACRkB,YAAY,yBAEd,SAAC3B,EAAY,CAACQ,KAAK,WAAWoB,UAAU,YAE1C,UAACzB,EAAS,YACR,SAACL,EAAS,CACR2B,MAAM,SACNjB,KAAK,QACLkB,KAAK,QACLjB,UAAQ,EACRkB,YAAY,uBAEd,SAAC3B,EAAY,CAACQ,KAAK,QAAQoB,UAAU,YAGvC,SAAC1B,EAAU,CAACwB,KAAK,SAASG,SAAUL,EAAa,SAAC,aAGlD,SAACpB,EAAU,CAAC0B,GAAIC,EAAAA,GAAMC,GAAG,SAAQ,SAAC,cAGzB,GAInB,C","sources":["components/Toast/Toast.jsx","pages/Register/Register.styled.jsx","pages/Register/Register.jsx"],"sourcesContent":["import PropTypes from \"prop-types\";\r\n\r\n// import { useToast } from \"@chakra-ui/react\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst CustomToast = () => {\r\n  // const toast = useToast();\r\n  // types are: \"success\", \"info\", \"warning\", \"error\"\r\n  // const notify = () => toast(\"Wow so easy !\");\r\n  // <ToastContainer />;\r\n\r\n  // toast(\"ðŸ¦„ Wow so easy!\", {\r\n  // position: \"top-right\",\r\n  // autoClose: 5000,\r\n  // hideProgressBar: false,\r\n  // closeOnClick: true,\r\n  // pauseOnHover: true,\r\n  // draggable: true,\r\n  // progress: undefined,\r\n  // theme: \"light\",\r\n  // });\r\n  const addToast = ({ info }) => {\r\n    toast.success(info, {\r\n      position: \"top-right\",\r\n      autoClose: 5000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n      theme: \"light\",\r\n    });\r\n  };\r\n\r\n  addToast.propTypes = {\r\n    info: PropTypes.string.isRequired,\r\n  };\r\n\r\n  return { addToast };\r\n};\r\n\r\nexport default CustomToast;\r\n","import styled from \"styled-components\";\r\nimport { Form, Field, ErrorMessage } from \"formik\";\r\n\r\nexport const BestForm = styled(Form)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  max-width: 560px;\r\n  margin: 0 auto;\r\n  gap: 16px;\r\n  color: red;\r\n  padding: 24px 0;\r\n`;\r\n\r\nexport const BestField = styled(Field)`\r\n  padding: 4px 12px;\r\n  width: 100%;\r\n  border-radius: 8px;\r\n  outline: none;\r\n  border: none;\r\n  box-sizing: border-box;\r\n\r\n  position: relative;\r\n`;\r\nexport const FormErrorMsg = styled(ErrorMessage)`\r\n  font-size: 10px;\r\n  position: absolute;\r\n`;\r\nexport const BestButton = styled.button`\r\n  padding: 8px 12px;\r\n  border-radius: 8px;\r\n  color: black;\r\n  background-color: var(--text-color);\r\n  border: none;\r\n  cursor: pointer;\r\n`;\r\nexport const InputItem = styled.div`\r\n  position: relative;\r\n`;\r\n\r\nexport const LinkGoBack = styled.a`\r\n  margin: 0 auto;\r\n  text-decoration: none;\r\n  color: var(--text-color);\r\n  font-size: 12px;\r\n  padding: 4px 8px;\r\n`;\r\n","import { useDispatch } from \"react-redux\";\r\nimport { register } from \"redux/auth/auth-operations\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport CustomToast from \"components/Toast\";\r\nimport {\r\n  BestButton,\r\n  BestField,\r\n  BestForm,\r\n  FormErrorMsg,\r\n  InputItem,\r\n  LinkGoBack,\r\n} from \"./Register.styled\";\r\n\r\nconst schemaAddContact = Yup.object().shape({\r\n  name: Yup.string()\r\n    .required(\"Login name required\")\r\n    .min(4, \"Login name is too short\")\r\n    .max(32, \"Login name is too long\"),\r\n  password: Yup.string()\r\n    .required(\"Password required\")\r\n    .min(4, \"Password is too short, min 4 digits\")\r\n    .max(32, \"Password is too long, max 32 digits\"),\r\n  email: Yup.string()\r\n    .required(\"E-mail required\")\r\n    .min(4, \"E-mail is too short\")\r\n    .max(32, \"E-mail is too long\"),\r\n});\r\n\r\nconst initialValues = {\r\n  name: \"\",\r\n  password: \"\",\r\n  email: \"\",\r\n};\r\n\r\nconst SignUp = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { addToast } = CustomToast();\r\n\r\n  const handleSubmit = (values, { resetForm }) => {\r\n    const { name, email, password } = values;\r\n    dispatch(register({ name, email, password }));\r\n    resetForm();\r\n    addToast({\r\n      info: `${name.toUpperCase()} welcome to the app`,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validationSchema={schemaAddContact}\r\n      onSubmit={handleSubmit}\r\n    >\r\n      {({ isSubmitting }) => (\r\n        <BestForm>\r\n          <InputItem>\r\n            <BestField\r\n              label=\"Login\"\r\n              type=\"text\"\r\n              name=\"name\"\r\n              required\r\n              placeholder=\"input your login\"\r\n            />\r\n            <FormErrorMsg name=\"name\" component=\"div\" />\r\n          </InputItem>\r\n          <InputItem>\r\n            <BestField\r\n              label=\"Password\"\r\n              name=\"password\"\r\n              type=\"password\"\r\n              required\r\n              placeholder=\"input your password\"\r\n            />\r\n            <FormErrorMsg name=\"password\" component=\"div\" />\r\n          </InputItem>\r\n          <InputItem>\r\n            <BestField\r\n              label=\"E-mail\"\r\n              name=\"email\"\r\n              type=\"email\"\r\n              required\r\n              placeholder=\"input your e-mail\"\r\n            />\r\n            <FormErrorMsg name=\"email\" component=\"div\" />\r\n          </InputItem>\r\n\r\n          <BestButton type=\"submit\" disabled={isSubmitting}>\r\n            Sign up\r\n          </BestButton>\r\n          <LinkGoBack as={Link} to=\"/login\">\r\n            Go Back\r\n          </LinkGoBack>\r\n        </BestForm>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default SignUp;\r\n"],"names":["addToast","info","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","propTypes","PropTypes","BestForm","styled","Form","BestField","Field","FormErrorMsg","ErrorMessage","BestButton","InputItem","LinkGoBack","schemaAddContact","Yup","shape","name","required","min","max","password","email","initialValues","dispatch","useDispatch","CustomToast","validationSchema","onSubmit","values","resetForm","register","toUpperCase","isSubmitting","label","type","placeholder","component","disabled","as","Link","to"],"sourceRoot":""}